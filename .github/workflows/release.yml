name: Build and Release

on:
  push:
    tags:
      - 'v*'  # Triggers on version tags like v0.1.0, v1.2.3
    branches:
      - main  # Build on main branch pushes
  pull_request:
    branches:
      - main

env:
  GO_VERSION: '1.21'

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - goos: linux
            goarch: amd64
          - goos: linux
            goarch: arm64
          - goos: darwin
            goarch: amd64
          - goos: darwin
            goarch: arm64
          - goos: windows
            goarch: amd64
          - goos: windows
            goarch: arm64

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Get dependencies
      run: go mod tidy

    - name: Run tests
      run: go test -v ./...

    - name: Build
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
        CGO_ENABLED: 0
      run: |
        # Create binary name with appropriate extension
        BINARY_NAME="translate-${{ matrix.goos }}-${{ matrix.goarch }}"
        if [ "${{ matrix.goos }}" = "windows" ]; then
          BINARY_NAME="${BINARY_NAME}.exe"
        fi
        
        # Build with optimization flags
        go build \
          -ldflags="-w -s -X main.AppVersion=${GITHUB_REF#refs/tags/}" \
          -o "$BINARY_NAME" \
          .
        
        # Create checksum
        if command -v sha256sum > /dev/null; then
          sha256sum "$BINARY_NAME" > "${BINARY_NAME}.sha256"
        else
          shasum -a 256 "$BINARY_NAME" > "${BINARY_NAME}.sha256"
        fi

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: binaries-${{ matrix.goos }}-${{ matrix.goarch }}
        path: translate-${{ matrix.goos }}-${{ matrix.goarch }}*

  release:
    name: Release
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        pattern: binaries-*
        merge-multiple: true

    - name: Generate release notes
      id: release_notes
      run: |
        TAG_NAME=${GITHUB_REF#refs/tags/}
        echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT
        
        # Create release notes
        cat > release_notes.md << EOF
        ## DeepLX CLI $TAG_NAME
        
        ### Installation
        
        #### Quick Install (Linux/macOS)
        \`\`\`bash
        # Linux AMD64
        curl -L -o translate https://github.com/${{ github.repository }}/releases/download/$TAG_NAME/translate-linux-amd64
        chmod +x translate
        sudo mv translate /usr/local/bin/
        
        # macOS AMD64 (Intel)
        curl -L -o translate https://github.com/${{ github.repository }}/releases/download/$TAG_NAME/translate-darwin-amd64
        chmod +x translate
        sudo mv translate /usr/local/bin/
        
        # macOS ARM64 (Apple Silicon)
        curl -L -o translate https://github.com/${{ github.repository }}/releases/download/$TAG_NAME/translate-darwin-arm64
        chmod +x translate
        sudo mv translate /usr/local/bin/
        \`\`\`
        
        #### Windows
        Download \`translate-windows-amd64.exe\` and add it to your PATH.
        
        ### Usage
        \`\`\`bash
        # Set up your DeepLX server token
        export TOKEN=your_token_here
        
        # Translate text
        translate "Hello, world!"
        
        # Specify target language
        translate -t es "Hello, world!"
        
        # Show alternatives
        translate --alternatives "Hello, world!"
        
        # Configure defaults
        translate config set --url http://localhost:1188 --token your_token
        \`\`\`
        
        ### What's New
        - Fixed authentication token handling
        - Added configuration management
        - Improved error messages
        - Added debug mode
        - Better command-line interface
        
        ### Checksums
        Verify your downloads with the provided SHA256 checksums:
        \`\`\`bash
        sha256sum -c translate-linux-amd64.sha256
        \`\`\`
        EOF

    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        name: Release ${{ steps.release_notes.outputs.tag_name }}
        body_path: release_notes.md
        files: |
          translate-*
          *.sha256
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
